/**
 * factory for messages
 */
//
package barchart; // non-java (C, C++, etc) package name space

//
option java_package = "com.barchart.proto.buf";
option java_outer_classname = "MessageSpec";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;
//
option optimize_for = SPEED;

// message fields
import "FieldSpec.proto";

// message options descriptor
import "google/descriptor.proto";

// define static message fields for meta data
extend google.protobuf.MessageOptions {
	optional int32 MessageTypeIndex = 50001; // message type index
	optional string MessageExtensionPrefix = 50002; // message type name prefix
	optional string MessageEnumNamePrefix = 50003; // message enum name prefix
}

// message type
// note: order by most frequent first
// note: must use prefix due to global scope
enum MessageType {
	Type_MarketData = 100;
	Type_MarketNews = 101;
	//
	Type_DataSubscribeRequest = 102;
	Type_DataSubscribeResponse = 103;
	//
	Type_NewsSubscribeRequest = 104;
	Type_NewsSubscribeResponse = 105;
	//
	Type_InstrumentRequest = 106;
	Type_InstrumentResponse = 107;
	//
	Type_LoginRequest = 108;
	Type_LoginResponse = 109;
	//
	Type_MarketStatus = 110;
	//
	Type_HeartBeat = 111;
}

// forward declaration of sub types / extensions
// note: keep in sync with enum
// note: must use prefix due to global scope
extend Base {
	optional MarketData messageMarketData = 100;
	optional MarketNews messageMarketNews = 101;
	//
	optional DataSubscribeRequest messageDataSubscribeRequest = 102;
	optional DataSubscribeResponse messageDataSubscribeResponse = 103;
	//
	optional NewsSubscribeRequest messageNewsSubscribeRequest = 104;
	optional NewsSubscribeResponse messageNewsSubscribeResponse = 105;
	//
	optional LoginRequest messageLoginRequest = 106;
	optional LoginResponse messageLoginResponse = 107;
	//
	optional InstrumentRequest messageInstrumentRequest = 108;
	optional InstrumentResponse messageInstrumentResponse = 109;
	//
	optional MarketStatus messageMarketStatus = 110;
	//
	optional HeartBeat messageHeartBeat = 111;
}

// message base for extensions / sub types
message Base {
	option (MessageEnumNamePrefix) = "Type_"; // rule for enum names
	option (MessageExtensionPrefix) = "message"; // rule for extension names
	extensions 100 to max; // message polymorph range
	//
	optional MessageType type = 1; // message type selector
	optional int64 sequence = 2; // message sequence number
	optional int64 timeStamp = 3; // message time stamp, millis UTC
}

// ##################################################

// one and only market data state change message
message MarketData {
	enum Type {
		UPDATE = 0;
		SNAPSHOT = 1;
		RESET_ALL = 2;
		RESET_BOOK = 3;
		RESET_CUVOL = 4;
	}

	optional Type type = 1;
	optional int64 marketId = 2;
	repeated MarketDataEntry entry = 3;
}

// ##################################################

//
message MarketNews {
	enum Type {
		MARKET_UPDATE = 0;
		BREAKING_NEWS = 1;
	}

	optional Type type = 1;
	optional int64 marketId = 2;
	repeated MarketNewsEntry entry = 3;
}

// ##################################################

// login from client to server
message LoginRequest {
	optional string username = 1;
	optional string password = 2;
}

// response from server to client
message LoginResponse {
	enum Status {
		SUCCESS = 1;
		FAILURE = 2;
	}

	optional Status status = 1;
	optional string comment = 2;
}

// ##################################################

//
message InstrumentRequest {
	optional int64 marketId = 1;
}

// minimum market-state required entries
message InstrumentResponse {
	optional int64 marketId = 1;
	optional Decimal priceIncrement = 2;
	optional string marketDescriptor = 3; // complete json object
}

// ##################################################

// state transitions
message MarketStatus {
	enum Type {
		OPENED = 0;
		CLOSED = 1;
		PRE_OPEN = 2;
		PRE_CLOSE = 3;
	}

	optional Type type = 1;
	optional int64 marketId = 2;
	optional string comment = 3;
}

// ##################################################

//
message DataSubscribeRequest {
	enum Type {
		UPDATE = 0;
		SNAPSHOT = 1;
	}

	repeated Type type = 1; // empty means none
	optional int64 marketId = 2;
}

//
message DataSubscribeResponse {
	enum Type {
		SUCCESS = 0;
		NOT_AVAILABLE = 1;
		NOT_AUTHORIZED = 2;
	}

	optional Type type = 1;
	optional int64 marketId = 2;
	optional string comment = 3;
}

// ##################################################

//
message NewsSubscribeRequest {
	enum Type {
		NONE = 0;
		UPDATE = 1;
		SNAPSHOT = 2;
	}

	repeated Type type = 1;
	optional int64 marketId = 2;
}

message NewsSubscribeResponse {
	enum Type {
		SUCCESS = 0;
		NOT_AVAILABLE = 1;
		NOT_AUTHORIZED = 2;
	}

	optional Type type = 1;
	optional int64 marketId = 2;
	optional string comment = 3;
}

// ##################################################

// bidirectional keep alive
message HeartBeat {
	optional int64 interval = 1;
}

// ##################################################
